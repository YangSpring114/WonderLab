name: AutoBuild
on:
  push:
    branches: [ "master"]
  pull_request:
    types:
      - opened
jobs:
  build_Windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Execute unit tests
      run: dotnet test
    - name: Build
      run: dotnet build WonderLab\WonderLabX.csproj --configuration Release -p:RuntimeIdentifier=win-x64
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: WonderLab\bin\Release\net6.0
  build_Linux:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Execute unit tests
      run: dotnet test
    - name: Build
      run: dotnet build WonderLab\WonderLabX.csproj --configuration Release -p:RuntimeIdentifier=linux-x64
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux
        path: WonderLab\bin\Release\net6.0
  build_MacOS:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Execute unit tests
      run: dotnet test
    - name: Build
      run: dotnet build WonderLab\WonderLabX.csproj --configuration Release -t:BundleApp -p:RuntimeIdentifier=osx-x64
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MacOS
        path: WonderLab\bin\Release\net6.0
  build_Linux_Deb:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Execute unit tests
      run: dotnet test
    - name: Build
      run: dotnet publish WonderLab/WonderLabX.csproj -c Release -r "linux-x64" -p:PublishSingleFile="false" -p:PublishReadyToRun=true -t:CreateDeb
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Deb
        path: 'WonderLab/bin/Release/net6.0/linux-x64/*.deb'
  build_Linux_Rpm:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Execute unit tests
      run: dotnet test
    - name: Build
      run: dotnet publish WonderLab/WonderLabX.csproj -c Release -r "linux-x64" -p:PublishSingleFile="false" -p:PublishReadyToRun=true -t:CreateRpm
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Rpm
        path: 'WonderLab/bin/Release/net6.0/linux-x64/*.rpm'
  Release:
    runs-on: ubuntu-latest
    needs: [build_Windows, build_MacOs, build_Linux_Deb, build_Linux_Rpm, build_Linux]
    steps:
    - name: Download WindowsBuild
      uses: actions/download-artifact@v3
      with:
       name: Windows
       path: Release/Windows
    - name: CreateWindowsZIP
      uses: thedoctor0/zip-release@0.7.1
      with:
         type: 'zip'
         filename: 'WonderLab_Windows.zip'
         directory: 'Release/Windows'
    - name: CreateRelease
      if: github.event_name != 'pull_request'
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: "AutoBuild"
          release_name: "自动构建版本"
          draft: false
          prerelease: true
          body: |
            "Actions自动构建版本"
    - name: Upload Windows Release Asset
      if: github.event_name != 'pull_request'
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.CreateRelease.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./WonderLab_Windows.zip
          asset_name: WonderLab_Windows.zip
          asset_content_type: application/zip
         
